{"name":"Phalanx","tagline":"is a Backbone wrapper library. Focusing to decouple view and manage ui component simply.","body":"Phalanx is a [Backbone](https://github.com/documentcloud/backbone) wrapper library. Focusing to decouple view and manage ui component simply.\r\n\r\n![Phalanx](http://upload.wikimedia.org/wikipedia/commons/3/32/Phalanx.png)\r\n\r\nvia. [Ancient Macedonian battle tactics - Wikipedia, the free encyclopedia](http://en.wikipedia.org/wiki/Ancient_Macedonian_battle_tactics \"Ancient Macedonian battle tactics - Wikipedia, the free encyclopedia\")\r\n\r\n##Getting started\r\n\r\n###Basic view and component\r\n\r\nThis is UI component parts.\r\n\r\n```js\r\nvar LikeBtnComponent = Phalanx.Component.extend({\r\n  // Events are delegated to the View.\r\n  events: {\r\n    'click .js-like': 'doLike'\r\n  },\r\n  // Elements with the data-ui are auto stored when create component instance.\r\n  ui: {\r\n    count: null\r\n  },\r\n  // Increment like count when POST completed.\r\n  doLike: function() {\r\n    $.post('/api/like', {id: this.id}, function() {\r\n      this.$ui.count.text(parseInt(this.$ui.count, 10) + 1);\r\n    }.bind(this));\r\n  }\r\n});\r\n```\r\n\r\nView that contains multiple components.\r\n\r\n```js\r\nvar ActivitiesListView = Phalanx.View.extend({\r\n  // Specified name here, will specify as data-component attr in the HTML.\r\n  components: {\r\n    'likeBtn': LikeBtnComponent\r\n  }\r\n});\r\n\r\nvar listView = new ActivitiesListView({el: '#js-list'});\r\n```\r\n\r\nThis is HTML.\r\n\r\n```html\r\n<section id=\"js-list\">\r\n  <ul>\r\n    <li>\r\n      <a>screen_name</a>\r\n      <p>Lorem ipsum dolor sit amet, consectetur adipisici…</p>\r\n\r\n      <!-- Events that have been delegated to occur, creation of component is delayed. -->\r\n      <div data-component=\"likeBtn\">      \r\n        <button class=\"js-like\"><button>\r\n        <span data-ui=\"count\">3</span>\r\n      </div>\r\n    </li>\r\n    ...\r\n    ..\r\n    .\r\n  </ul>\r\n</section>\r\n```\r\n\r\nSplit the screen, `Phalanx.View` to manage a certain areas and `Phalanx.Component` to manage small specific function.\r\n\r\n###Declarative listening Component triggering events\r\n\r\nComponent triggered `success` event when $.get complete.\r\n\r\n```js\r\nvar ReadMoreBtnComponent = Phalanx.Component.extend({\r\n  events: {\r\n    'click [data-ui=\"btn\"]': 'onClickBtn'\r\n  },\r\n  onClickBtn: function(evt) {\r\n    var href  = evt.currentTarget.getAttribute('href');\r\n\r\n    $.get(href, function(resp) {\r\n      this.trigger('success', resp);\r\n    }.bind(this));\r\n  }\r\n});\r\n```\r\n\r\nView is listening to `success` event from `ReadMoreBtnComponent`.\r\n\r\n```js\r\nvar ListView = Phalanx.View.extend({\r\n  components: {\r\n    'moreBtn': ReadMoreBtnComponent\r\n  },\r\n  listeners: {\r\n    'success moreBtn': 'renderMore'\r\n  },\r\n  ui {\r\n    list null\r\n  }\r\n  renderMore: function(html) {\r\n    this.$ui.list.append(html);\r\n  }\r\n});\r\n\r\nvar listView = new ListView({el: '#js-list'});\r\n```\r\n\r\nThis is HTML.\r\n\r\n```html\r\n<section id=\"js-list\">\r\n  <div data-ui=\"list\">\r\n    <div>Item 1</div>\r\n    <div>Item 2</div>\r\n    <div>Item 3</div>\r\n  </div>\r\n  <p data-component=\"moreBtn\">\r\n    <a href=\"/api/path/to/list&page=2\" data-ui=\"btn\">Read more</a>\r\n  </p>\r\n</section>\r\n```\r\n\r\nComponent plays a role in local without knowing of View. To receive the event, in conjunction with result of Component, View updates itself.\r\n\r\n###Layout regions and assignment Views\r\n\r\n```js\r\nvar RootLayout = Phalanx.Layout.extend({\r\n  regions: {\r\n    header : '#js-header',\r\n    content: '#js-content',\r\n    footer : '#js-footer'\r\n  },\r\n  onChange: function(regionName, newView, oldView) {\r\n    // Called when regions view was changed.\r\n  }\r\n});\r\n\r\nvar rootLayout = new RootLayout({el: 'body'}),\r\n    currentPage = '';\r\n\r\nrootLayout.assign('header',  new HeaderView());\r\nrootLayout.assign('content', new InitialView());\r\nrootLayout.assign('footer',  new FooterView());\r\n\r\nwindow.addEventListener('hashchange', function() {\r\n  if (currentPage === location.hash.slice(1)) {\r\n    return;\r\n  }\r\n  currentPage = location.hash.slice(1);\r\n\r\n  // When a new View has been assigned, the old View is destroyed automatically.\r\n  switch(currentPage)) {\r\n    case '':\r\n      layout.assign('content', new InitialView());\r\n      break;\r\n    case 'feed':\r\n      layout.assign('content', new FeedView());\r\n      break;\r\n    case 'home':\r\n      layout.assign('content', new HomeView());\r\n      break;\r\n    case 'inbox':\r\n      layout.assign('content', new InboxView());\r\n      break;\r\n  }\r\n});\r\n\r\n```\r\n\r\nThis is HTML.\r\n\r\n```html\r\n<body>\r\n  <header id=\"js-header\">\r\n    <!-- HEADER -->\r\n  </header>\r\n  <div id=\"js-content\">\r\n    <!-- MAIN CONTENT -->\r\n  </div>\r\n  <footer id=\"js-footer\">\r\n    <!-- FOOTER -->\r\n  </footer>\r\n</body>\r\n```\r\n\r\nThe layout manage the elements in the page, what View have been assigned. Have the role of like a controller.\r\n\r\n##Requirements\r\n\r\n###Depend Libraries\r\n\r\n- [documentcloud/backbone](https://github.com/documentcloud/backbone \"documentcloud/backbone · GitHub\")\r\n  - [bestiejs/lodash](https://github.com/bestiejs/lodash \"bestiejs/lodash · GitHub\")\r\n  - [jquery/jquery](https://github.com/jquery/jquery \"jquery/jquery · GitHub\") or [madrobby/zepto](https://github.com/madrobby/zepto \"madrobby/zepto · GitHub\")\r\n\r\n###Document generator\r\n\r\nGenerating JavaScript API documents and introspection report.\r\n\r\n- [senchalabs/jsduck](https://github.com/senchalabs/jsduck \"senchalabs/jsduck · GitHub\")\r\n- [jsoverson/plato](https://github.com/jsoverson/plato \"jsoverson/plato · GitHub\")\r\n\r\n```\r\nnpm install -g grunt-cli\r\nnpm install\r\n\r\ngrunt jsduck\r\ngrunt plato\r\n```\r\n\r\n###Automated spec runner\r\n\r\nUsing [mocha](http://visionmedia.github.io/mocha/) test framework with [expect.js](https://github.com/LearnBoost/expect.js/) and [sinon.js](http://sinonjs.org/).\r\n\r\n- [airportyh/testem](https://github.com/airportyh/testem \"airportyh/testem · GitHub\")\r\n- [jashkenas/coffee-script](https://github.com/jashkenas/coffee-script \"jashkenas/coffee-script · GitHub\")\r\n\r\n```\r\nbower install\r\ngem install juicer\r\n./lib/sinon/build\r\n\r\nbrew install phantomjs\r\nnpm install -g testem\r\n\r\ntestem #run specs\r\n```\r\n\r\n##TODO\r\n\r\n- Conceptual diagram","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}